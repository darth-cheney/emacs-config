#+TITLE: Emacs Literatie Configuration
#+AUTHOR: Eric Gade (darth-cheney)
#+STARTUP: show2levels indent hidestars
#+PROPERTY: header-args :tangle (let ((org-use-tag-inheritance t)) (if (member "INACTIVE" (org-get-tags))  "no" "~/.emacs.d/init.el")))
** Early Init Settings
:PROPERTIES:
:header-args:emacs-lisp: :tangle "~/.emacs.d/early-init.el"
:END:

The following code will be placed into the [[file:early.init.el][early-init.el]]. This mostly deals with setting `straight.el` as the default package manager.

#+begin_src emacs-lisp
(setq package-enable-at-startup nil)
#+end_src

** Package Management
Set us up to use `straight.el` as the main package manager
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

Install `use-package` for package configuration
#+begin_src emacs-lisp
  (straight-use-package 'use-package)
;; Configure use-package to use straight.el by default
(use-package straight
             :custom (straight-use-package-by-default t))
#+end_src

** Preamble
Put custom defined variables in a separate file and load that file if it's there.

#+begin_src emacs-lisp
(setq custom-file (concat user-emacs-directory "custom.el"))
(load-file custom-file)
#+end_src

Tell us if the system is a Mac or not
#+begin_src emacs-lisp
(defconst *is-a-mac* (eq system-type 'darwin))
#+end_src

Set default font and size based on the system being used (currently _INACTIVE_)
#+begin_src emacs-lisp
;; (defvar eric-custom/default-font-size 130)
;; (set-face-attribute 'default nil :font "Fira Code" :height 132)
;; (if *is-a-mac*
;;     (set-face-attribute 'default nil :font "Fira Code" :height 140))
#+end_src

Ignore Common Lisp deprecation warnings
#+begin_src emacs-lisp
(setq byte-compile-warnings '(cl-functions))
#+end_src

** Basic UI Settings
#+begin_src emacs-lisp
  (scroll-bar-mode -1)      ; Disable visible scrollbar
  (tool-bar-mode -1)         ; Disable the toolbar
  (tooltip-mode -1)            ; Disable tooltips
  (set-fringe-mode 10)      ; Give some breathing room
  (menu-bar-mode -1)      ; Disable the menu bar

  (column-number-mode)
  (global-display-line-numbers-mode t) ;; Display line numbers globally

  ;; Disable line numbering in these modes:
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  vterm-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  elpher-mode-hook
                  dired-mode-hook
                  markdown-mode-hook
                  ement-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

(defconst *spell-check-support-enabled* nil) ;; Enable with t if you prefer

;; Deal with  TLS1.3 Bug that seems to affect Melpa?
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
#+end_src

** Comprehensive UI Settings
These initial defaults have been taken from an old config. Consider modifying and/or removing as needed.
#+begin_src emacs-lisp
  (setq-default
   blink-cursor-interval 0.4
   bookmark-default-file (expand-file-name ".bookmarks.el" user-emacs-directory)
   buffers-menu-max-size 30
   case-fold-search t
   column-number-mode t
   delete-selection-mode t
   ediff-split-window-function 'split-window-horizontally
   ediff-window-setup-function 'ediff-setup-windows-plain
   indent-tabs-mode nil
   make-backup-files nil
   mouse-yank-at-point t
   save-interprogram-paste-before-kill t
   scroll-preserve-screen-position 'always
   set-mark-command-repeat-pop t
   tooltip-delay 1.5
   truncate-lines nil
   truncate-partial-width-windows nil)
#+end_src
**** Use ~prot~'s lin mode for highlighting the current line
#+begin_src emacs-lisp
(use-package lin
    :straight '(lin-mode :type git :host github :repo "protesilaos/lin")
    :bind
    ("C-c l" . lin-mode))
#+end_src
**** Default font settings
#+begin_src emacs-lisp
;;(set-face-attribute 'default nil :font "DinaRemasterII" :weight 'regular :height 170)
#+end_src

Add a custom interactive for setting the font height
#+begin_src emacs-lisp
(defun eg/set-default-font-height ()
  (interactive)
  (let ((num (read-number "Enter new font height:  ")))
    (set-face-attribute 'default nil :height num)))
#+end_src
*** Opacity Related Settings
In the end, the following keybindings will be available:
| M-C-8 | Decrease opacity   |
| M-C-9 | Increase opacity   |
| M-C-7 | Set opacity to 100 |

#+begin_src emacs-lisp
(defun sanityinc/adjust-opacity (frame incr)
  "Adjust the background opacity of FRAME by increment INCR."
  (unless (display-graphic-p frame)
    (error "Cannot adjust opacity of this frame"))
  (let* ((oldalpha (or (frame-parameter frame 'alpha) 100))
         ;; The 'alpha frame param became a pair at some point in
         ;; emacs 24.x, e.g. (100 100)
         (oldalpha (if (listp oldalpha) (car oldalpha) oldalpha))
         (newalpha (+ incr oldalpha)))
    (when (and (<= frame-alpha-lower-limit newalpha) (>= 100 newalpha))
      (modify-frame-parameters frame (list (cons 'alpha newalpha))))))

(global-set-key (kbd "M-C-8") (lambda () (interactive) (sanityinc/adjust-opacity nil -2)))
(global-set-key (kbd "M-C-9") (lambda () (interactive) (sanityinc/adjust-opacity nil 2)))
(global-set-key (kbd "M-C-7") (lambda () (interactive) (modify-frame-parameters nil `((alpha . 100)))))
#+end_src

*** Font Settings
Use Unicode fonts so that we can have civilized text.
#+begin_src emacs-lisp
(use-package unicode-fonts
   :ensure t
   :config
   (unicode-fonts-setup))

(set-fontset-font t 'symbol "Noto Color Emoji" nil)
(set-fontset-font t 'symbol "Symbola" nil 'append)
#+end_src

** Dired Settings
Give us somewhat sane looking output:
#+begin_src emacs-lisp
(setq dired-listing-switches "-o")
#+end_src

#+begin_src emacs-lisp
(use-package all-the-icons-dired
  :hook ((dired-mode . all-the-icons-dired-mode)
         (dired-mode . dired-hide-details-mode)
         (dired-mode . hl-line-mode)))
#+end_src
** Text Encoding
Use utf-8 as much as possible
(taken from https://github.com/rougier/dotemacs/blob/master/dotemacs.org)
#+begin_src emacs-lisp
(set-default-coding-systems 'utf-8)     ; Default to utf-8 encoding
(prefer-coding-system       'utf-8)     ; Add utf-8 at the front for automatic detection.
(set-terminal-coding-system 'utf-8)     ; Set coding system of terminal output
(set-keyboard-coding-system 'utf-8)     ; Set coding system for keyboard input on TERMINAL
(set-language-environment "English")    ; Set up multilingual environment
#+end_src
** Custom Commands

Commands that I have written for personal use.

This command will kill all /other/ (meaning non-current) buffers.
#+begin_src emacs-lisp
(defun eg/is-current-buffer (buff)
  "Respond true if the given buffer is the current buffer"
  (eq buff (current-buffer)))

(defun eg/get-all-non-current-buffers ()
  "Return a list of all current buffers aside from the current one"
  (seq-filter '(lambda (buff)
                 (not (eg/is-current-buffer buff)))
              (buffer-list)))

(defun kill-other-buffers ()
  "Kill all open buffers aside from the current one"
  (interactive)
  (mapcar 'kill-buffer (eg/get-all-non-current-buffers))
  (delete-other-windows))
#+end_src

This command kills all buffers period.
#+begin_src emacs-lisp
(defun kill-all-buffers ()
  "Kill all open buffers."
  (interactive)
  (mapc 'kill-buffer (buffer-list))
  (delete-other-windows))
#+end_src
** VTerm and Command Line Utils
I am using ~vterm~ instead of ~ansi-term~ for the time being.
#+begin_src emacs-lisp
(defun eg/vterm-mode-hook ()
  (define-key vterm-mode-map (kbd "C-<left>") 'windmove-left)
  (define-key vterm-mode-map (kbd "C-<right>") 'windmove-right)
  (define-key vterm-mode-map (kbd "C-<up>") 'windmove-up)
  (define-key vterm-mode-map (kbd "C-<down>") 'windmove-down))
(use-package vterm
  :hook
  (vterm-mode . eg/vterm-mode-hook))
#+end_src

Use ~dwim-shell-command~ for on the fly command line integration
#+begin_src emacs-lisp
(use-package dwim-shell-command
  :ensure t
  :bind (([remap shell-command] . dwim-shell-command)
         :map dired-mode-map
         ([remap dired-do-async-shell-command] . dwim-shell-command)
         ([remap dired-do-shell-command] . dwim-shell-command)
         ([remap dired-smart-shell-command] . dwim-shell-command))
  :config
  )
#+end_src
** Basic Built-ins (straight)
Make sure that plain modes are at the latest versions, using straight.
#+begin_src emacs-lisp
(use-package xref
    :straight t)

  (use-package project
    :straight t)

  (use-package eldoc
    :straight t)

#+end_src
** SVG Integration
We use the [[https://github.com/rougier/svg-lib][svg-lib]] library for allowing dynamic SVGs to be inserted inline in certain modes, like org
#+begin_src emacs-lisp
  (use-package svg-lib
               :straight '(svg-lib :type git :host github :repo "rougier/svg-lib"))
#+end_src
** Themes
Load the DOOM Themes, which are nice defaults. Note that we have _disabled_ the default loading of the challenger-deep theme for now.
#+begin_src emacs-lisp
  (use-package doom-themes
          ;;:init (load-theme 'doom-challenger-deep t)
           )
#+end_src

Load the NANO theme
#+begin_src emacs-lisp
    (use-package nano-theme
      :ensure nil
      :straight '(nano-theme :type git :host github :repo "rougier/nano-theme"))
  (setq nano-fonts-use t)
#+end_src

Ensure that when we switch themes, we reset the cursor to be a block type
#+begin_src emacs-lisp
  (defun eg/after-theme-load (_theme &rest args)
    (message "eg/after-theme-load!")
    (setq-default cursor-type 'box)
    (nano-modeline-mode 1)
  (advice-add 'load-theme :after 'eg/after-theme-load))
#+end_src

Load the nano-light theme as the default
#+begin_src emacs-lisp
  ;(load-theme 'nano-light t)
  (nano-mode)
  (load-theme 'nano-light t)
  (setq-default cursor-type 'box)
#+end_src
** Modeline Setup

Use the DOOM Modeline (currently _INACTIVE_)
#+begin_src emacs-lisp
;; (use-package doom-modeline
;; 	    :init (doom-modeline-mode 1)
;; 	    :custom ((doom-modeline-height 40)))
#+end_src

Use the NANO modeline
#+begin_src emacs-lisp
  (use-package nano-modeline
    :straight '(nano-modeline :type git :host github :repo "rougier/nano-modeline"))
#+end_src

Use the following nano-modeline settings, taken from
https://raw.githubusercontent.com/rougier/dotemacs/master/dotemacs.org
#+begin_src emacs-lisp
(setq nano-modeline-prefix 'status)
(setq nano-modeline-prefix-padding 1)

(set-face-attribute 'header-line nil)
(set-face-attribute 'mode-line nil
                    :foreground (face-foreground 'nano-subtle-i)
                    :background (face-foreground 'nano-subtle-i)
                    :inherit nil
                    :box nil)
(set-face-attribute 'mode-line-inactive nil
                    :foreground (face-foreground 'nano-subtle-i)
                    :background (face-foreground 'nano-subtle-i)
                    :inherit nil
                    :box nil)

(set-face-attribute 'nano-modeline-active nil
                    :underline (face-foreground 'nano-default-i)
                    :background (face-background 'nano-subtle)
                    :inherit '(nano-default-)
                    :box nil)
(set-face-attribute 'nano-modeline-inactive nil
                    :foreground 'unspecified
                    :underline (face-foreground 'nano-default-i)
                    :background (face-background 'nano-subtle)
                    :box nil)

(set-face-attribute 'nano-modeline-active-name nil
                    :foreground "black"
                    :inherit '(nano-modeline-active nano-strong))
(set-face-attribute 'nano-modeline-active-primary nil
                    :inherit '(nano-modeline-active))
(set-face-attribute 'nano-modeline-active-secondary nil
                    :inherit '(nano-faded nano-modeline-active))

(set-face-attribute 'nano-modeline-active-status-RW nil
                    :inherit '(nano-faded-i nano-strong nano-modeline-active))
(set-face-attribute 'nano-modeline-active-status-** nil
                    :inherit '(nano-popout-i nano-strong nano-modeline-active))
(set-face-attribute 'nano-modeline-active-status-RO nil
                    :inherit '(nano-default-i nano-strong nano-modeline-active))

(set-face-attribute 'nano-modeline-inactive-name nil
                    :inherit '(nano-faded nano-strong
                               nano-modeline-inactive))
(set-face-attribute 'nano-modeline-inactive-primary nil
                    :inherit '(nano-faded nano-modeline-inactive))

(set-face-attribute 'nano-modeline-inactive-secondary nil
                    :inherit '(nano-faded nano-modeline-inactive))
(set-face-attribute 'nano-modeline-inactive-status-RW nil
                    :inherit '(nano-modeline-inactive-secondary))
(set-face-attribute 'nano-modeline-inactive-status-** nil
                    :inherit '(nano-modeline-inactive-secondary))
(set-face-attribute 'nano-modeline-inactive-status-RO nil
                    :inherit '(nano-modeline-inactive-secondary))
#+end_src

Custom Modeline Formats
#+begin_src emacs-lisp
(defun eg/nano-modeline-prog-mode-p ()
   (derived-mode-p 'prog-mode))

(defun eg/nano-modeline-text-mode-p ()
  (derived-mode-p 'text-mode))

(defun eg/nano-get-branch-name-string ()
  (let ((branch-name (nano-modeline-vc-branch)))
    (if branch-name
        branch-name
      " ")))

(defun eg/nano-modeline-prog-mode ()
  (let* ((icon (plist-get (cdr (assoc 'prog-mode nano-modeline-mode-formats)) :icon))
         (buff-name (format-mode-line "%b"))
         (branch-name (eg/nano-get-branch-name-string))
         (mode-name (nano-modeline-mode-name))
         (num-lines (car (page--count-lines-page)))
         (prog-circle (propertize "  " 'display
                                  (svg-lib-progress-pie
                                   (/ (current-line) (* 1.0 num-lines))
                                   nil
                                   :width 1
                                   :stroke 2
                                   :padding 2
                                   :margin 0)))
         (position (format-mode-line "%l:%c")))
    (nano-modeline-render icon
                          buff-name
                          branch-name
                          (concat
                           position
                           "  "
                           (if (member #'eglot--managed-mode minor-mode-list)
                               (format-mode-line (eglot--mode-line-format))
                             "")
                           "  "
                           ;;(format-mode-line flymake-mode-line-format)
                           ;;"  "
                           (format-mode-line prog-circle)
                           "  "
                           mode-name))))

(add-to-list
 'nano-modeline-mode-formats
 '(prog-mode
   :mode-p eg/nano-modeline-prog-mode-p
   :format eg/nano-modeline-prog-mode
   :icon ""))
(add-to-list
 'nano-modeline-mode-formats
 '(yaml-mode
   :mode-p eg/nano-modeline-text-mode-p
   :format eg/nano-modeline-prog-mode
   :icon ""))
#+end_src

Custom hook for styling the modeline as a thin line.
Taken from ()
#+begin_src emacs-lisp
  (defun my/thin-modeline ()
    "Transform the modeline in a thin faded line"
  
    (nano-modeline-face-clear 'mode-line)
    (nano-modeline-face-clear 'mode-line-inactive)
    (setq mode-line-format (list ""))
    (setq-default mode-line-format (list ""))
    (set-face-attribute 'mode-line nil
                        :box nil
                        :inherit nil
                        :foreground (face-background 'nano-subtle)
                        :background (face-background 'nano-subtle)
                        :height 0.1)
    (set-face-attribute 'mode-line-inactive nil
                        :box nil
                        :inherit nil
                        :foreground (face-background 'nano-subtle)
                        :background (face-background 'nano-subtle)
                        :height 0.1))

  (add-hook 'nano-modeline-mode-hook #'my/thin-modeline)
(nano-modeline-mode 1)
#+end_src
** Minibuffer Settings
Taken from (https://github.com/rougier/dotemacs/blob/master/dotemacs.org)
#+begin_src emacs-lisp
(defun my/minibuffer-header ()
  "Minibuffer header"
  
  (let ((depth (minibuffer-depth)))
    (concat
     (propertize (concat "  " (if (> depth 1)
                                   (format "Minibuffer (%d)" depth)
                                 "Minibuffer ")
                         "\n")
                 'face `(:inherit (nano-subtle nano-strong)
                         :box (:line-width (1 . 3)
                               :color ,(face-background 'nano-subtle)
                               :style flat)
                         :extend t)))))
#+end_src

Setup minibuffer with the custom header line
#+begin_src emacs-lisp
  (defun my/minibuffer-setup ()
    "Install a header line in the minibuffer via an overlay (and a hook)"
  
    (set-window-margins nil 0 0)
    (set-fringe-style '(0 . 0))
    (cursor-intangible-mode t)
    (face-remap-add-relative 'default
                             :inherit 'highlight)
   (let* ((overlay (make-overlay (+ (point-min) 0) (+ (point-min) 0)))
          (inhibit-read-only t))

      (save-excursion
        (goto-char (point-min))
        (insert (propertize
                 (concat (my/minibuffer-header)
                         (propertize "\n" 'face `(:height 0.33))
                         (propertize " "))
                 'cursor-intangible t
                 'read-only t
                 'field t
                 'rear-nonsticky t
                 'front-sticky t)))))


(add-hook 'minibuffer-setup-hook #'my/minibuffer-setup)
#+end_src
** Completion Settings
*** Savehist
#+begin_src emacs-lisp
    (use-package savehist
      :config (savehist-mode 1))
#+end_src
*** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :custom (vertico-cycle t)
    :config (vertico-mode))
#+end_src
*** Corfu
#+begin_src emacs-lisp
(use-package corfu
  :ensure t
  :custom (corfu-cycle t)
  :config (global-corfu-mode))
#+end_src
*** Orderless
#+begin_src emacs-lisp
(use-package orderless
  :custom ((completion-styles '(orderless))))
#+end_src
*** Consult
#+begin_src emacs-lisp
  (use-package consult
    :bind ("C-s" . consult-line))
#+end_src
*** Consult-Dir
Used for switching directories
#+begin_src emacs-lisp
(use-package consult-dir)
#+end_src
*** Marginalia
#+begin_src emacs-lisp
(use-package marginalia
  :custom (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :config (marginalia-mode))
#+end_src
** Counsel Settings :INACTIVE:
We use Counsel in combination with Ivy in order to have a rich completion interface in the minibuffer.
#+begin_src emacs-lisp
(use-package counsel
  :ensure t
  :bind (("M-x" . counsel-M-x)
	 ("C-x b" . counsel-switch-buffer)
	 ("C-x C-f" . counsel-find-file)
	 :map minibuffer-local-map
	 ("C-r" . 'counsel-minibuffer-history)))

;; Also init which-key, which helps with
;; documentation and provides the delay before
;; showing futher bindings
(use-package which-key
	     :init (which-key-mode)
	     :diminish which-key-mode
	     :config
	     (setq which-key-idle-delay 1))
#+end_src
** Ivy Configuration :INACTIVE:
Use Ivy as the completion frontend
#+begin_src emacs-lisp
(use-package ivy
	     :diminish
	     :bind (("C-s" . swiper)
		    :map ivy-minibuffer-map
		    ("TAB" . ivy-alt-done)
		    ("C-k" . ivy-next-line)
		    ("C-j" . ivy-previous-line))
	     :config
	     (ivy-mode 1))

(use-package ivy-rich
	     :init
	     (ivy-rich-mode 1))
#+end_src

Smex shows the most recently-used commands at the top of the minibuffer when executing interactively.
#+begin_src emacs-lisp
(use-package smex)
#+end_src

** Icons and other Graphical Flourishes
All the Icons provides a great set of icons for the UI. Note that you will need to run `M-x all-the-icons-install-fonts` interactively when you first load a fresh configuration.
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src

** Hydra Settings
The use of Hydra is currently _INACTIVE_.
#+begin_src emacs-lisp
;; (use-package hydra)
#+end_src

** Helpful (the package) Settings
Helpful is a better help interface that interacts with the built-in Emacs documentation. It is especially powerful when used with Ivy/Counsel.
#+begin_src emacs-lisp
(use-package helpful
	     :custom
	     (counsel-describe-function-function #'helpful-callable)
	     (counsel-describe-variable-function #'helpful-variable)
	     :bind
	     ([remap describe-function] . helpful-describe-function)
	     ([remap describe-command] . helpful-command)
	     ([remap describe-variable] . helpful-describe-variable)
	     ([remap describe-key] . helpful-key))
#+end_src

** Dashboard Settings
The Dashboard is the opening screen that you see when Emacs first opens.

Using the dashboard package, we provide a customized verson of that page which shows things like the org agenda, recent files, a custom image, and buttons, etc.
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :config (dashboard-setup-startup-hook)
  :custom ((dashboard-banner-logo-title "")
	   (dashboard-startup-banner "~/.emacs.d/lamassu.png")
	   (dashboard-center-content t)
	   (dashboard-set-heading-icons t)
	   (dashboard-set-file-icons t)
	   (dashboard-set-footer nil)))
#+end_src

** Window Movement and General Keybindings
Custom basic navigation around different windows
#+begin_src emacs-lisp
(global-set-key (kbd "C-<right>") 'windmove-right)
(global-set-key (kbd "C-<left>") 'windmove-left)
(global-set-key (kbd "C-<down>") 'windmove-down)
(global-set-key (kbd "C-<up>") 'windmove-up)
#+end_src

Windmove has some problems by default when in terminal char mode. We have some settings to better deal with that here.
#+begin_src emacs-lisp
(eval-after-load "term"
  '(progn
     (define-key term-raw-map (kbd "C-<left>") 'windmove-left)
     (define-key term-raw-map (kbd "C-<right>") 'windmove-right)
     (define-key term-raw-map (kbd "C-<up>") 'windmove-up)
     (define-key term-raw-map (kbd "C-<down>") 'windmove-down)))
(eval-after-load "vterm"
  '(progn
     (define-key term-raw-map (kbd "C-<left>") 'windmove-left)
     (define-key term-raw-map (kbd "C-<right>") 'windmove-right)
     (define-key term-raw-map (kbd "C-<up>") 'windmove-up)
     (define-key term-raw-map (kbd "C-<down>") 'windmove-down)))
#+end_src

  Dim the other (inactive) buffer windows when the cursor is not in them.
  #+begin_src emacs-lisp
  (use-package dimmer
    :custom ((dimmer-fraction 0.45)
             ;; :both will dim background and foreground
             (dimmer-adjustment-mode :foreground)))
    :config (dimmer-mode t)
#+end_src

Ensure that when we split new windows, the cursor gets automatically inserted into the new window.
#+begin_src emacs-lisp
(defun split-and-follow-horizontally ()
  "Split a new window horizontally and put the
cursor into the new window"
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

(defun split-and-follow-vertically ()
  "Split a new window vertically and put the
cursor into the new window"
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+end_src

Create keybindings for quickly increasing/decreasing the text scale in a buffer.
#+begin_src emacs-lisp
(bind-keys
 ("s-=" . text-scale-increase)
 ("s-\-" . text-scale-decrease))
#+end_src

Use Beacon to light the way
#+begin_src emacs-lisp
(use-package beacon
  :init (beacon-mode 1)
  :custom ((beacon-lighter "")
	   (beacon-size 20)))
#+end_src

** Magit Settings
Ensure that Magit shows in full frames (this is much better)
#+begin_src emacs-lisp
(use-package fullframe)
#+end_src

#+begin_src emacs-lisp
(use-package magit
  :init(fullframe magit-status magit-mode-quit-window)
  :bind (("C-x g" . magit-status))
  :custom ((magit-diff-refine-hunk t)))

(use-package git-commit
  :hook ((git-commit-mode . goto-address-mode)))
#+end_src

** Completion Settings
Parenthesis and bracket autocompletion (see JS2 Setings for example of use)
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'electric-pair-mode)
#+end_src

** Language Settings
This section describes settings for specific languages, including syntax highlighting and LSP interaction.
*** Language Mode Prerequisites
Make sure we add binaries in a local project's node_modules folder (this lets us use project eslint, etc)
#+begin_src emacs-lisp
(use-package add-node-modules-path)
#+end_src
*** Ruby Settings
For future reference, the following prevents super weird indentation rules in the normal ruby-mode:
#+begin_src emacs-lisp
;; (setq ruby-deep-indent-paren nil)
#+end_src

#+begin_src emacs-lisp
(defun eg/ruby-mode-hook ()
  (setq ruby-indent-level 2
        ruby-indent-tabs-mode nil)
  (company-mode))
(use-package enh-ruby-mode
  :hook
  (enh-ruby-mode . eg/ruby-mode-hook)
  (enh-ruby-mode . delete-selection-mode))
(use-package ruby-electric
  :hook
  (enh-ruby-mode . ruby-electric-mode))
(use-package rvm
  :config (rvm-use-default))

;; Add Ruby files to the auto-mode setup
(add-to-list 'auto-mode-alist
             '("\\.\\(?:cap\\|gemspec\\|irbrc\\|gemrc\\|rake\\|rb\\|ru\\|thor\\)\\'" . enh-ruby-mode))
(add-to-list 'auto-mode-alist
             '("\\(?:Brewfile\\|Capfile\\|Gemfile\\(?:\\.[a-zA-Z0-9._-]+\\)?\\|[rR]akefile\\)\\'" . enh-ruby-mode))
#+end_src

Add rubocop for linting
#+begin_src emacs-lisp
(use-package rubocop
   :ensure t
   :init
   :hook
   (enh-ruby-mode . rubocop-mode)
   :diminish rubocop-mode)
#+end_src
**** Rspec Settings
#+begin_src emacs-lisp
;; (use-package rspec-mode
;; :config (setq rspec-use-rvm nil))
;; (add-to-list 'auto-mode-alist '(".spec\\.rb\\'" . rspec-mode))

#+end_src
**** Robe Environment Settings
#+begin_src emacs-lisp
(use-package robe
  :after (company)
  :hook (enh-ruby-mode . robe-mode)
  :config ((lambda ()
             (push 'company-robe company-backends)))
  )
(advice-add 'inf-ruby-console-auto :before #'rvm-activate-corresponding-ruby)
#+end_src
*** Node / NVM Settings
#+begin_src emacs-lisp
(use-package nvm
:straight '(nvm :type git :host github :repo "rejeep/nvm.el"))
#+end_src

*** Javascript/JSX Settings
Add regex so we can link to file lines when using compilation mode for testing and debugging
#+begin_src emacs-lisp
;; Add NodeJS error format
(setq compilation-error-regexp-alist-alist
      (cons '(node "^[  ]+at \\(?:[^\(\n]+ \(\\)?\\([a-zA-Z\.0-9_/-]+\\):\\([0-9]+\\):\\([0-9]+\\)\)?$"
                         1 ;; file
                         2 ;; line
                         3 ;; column
                         )
            compilation-error-regexp-alist-alist))
(setq compilation-error-regexp-alist-alist
      (cons '(npm "^[  ]+at \\(?:[^\(\n]+ \(\\)?\\([a-zA-Z\.0-9_/-]+\\):\\([0-9]+\\):\\([0-9]+\\)\)?$"
                         1 ;; file
                         2 ;; line
                         3 ;; column
                         )
            compilation-error-regexp-alist-alist))
(setq compilation-error-regexp-alist-alist
      (cons '(npx "^[  ]+at \\(?:[^\(\n]+ \(\\)?\\([a-zA-Z\.0-9_/-]+\\):\\([0-9]+\\):\\([0-9]+\\)\)?$"
                         1 ;; file
                         2 ;; line
                         3 ;; column
                         )
            compilation-error-regexp-alist-alist))
(setq compilation-error-regexp-alist
      (cons 'node compilation-error-regexp-alist))
(setq compilation-error-regexp-alist
      (cons 'npx compilation-error-regexp-alist))
(setq compilation-error-regexp-alist
      (cons 'npm compilation-error-regexp-alist))
#+end_src

Custom hooks for JS2 and rjsx modes

Install JS2 mode for dealing with Javscript files
#+begin_src emacs-lisp
(defun eg/js2-mode-hook ()
    (progn
      (setq mode-name "JS2")
      (add-node-modules-path)))
(use-package js2-mode
  :hook (js2-mode . eg/js2-mode-hook)
  :custom ((js-indent-level 2)))

(add-to-list 'auto-mode-alist '("\\.\\(js\\|es6\\)\\(\\.erb\\)?\\'" . js2-mode))
#+end_src

Install Typescript mode for plain ts files
#+begin_src emacs-lisp
(defun eg/typescript-mode-hook ()
  (company-mode)
  (eglot-ensure)
  (add-node-modules-path))
;; Taken from (https://vxlabs.com/2022/06/12/typescript-development-with-emacs-tree-sitter-and-lsp-in-2022/)
(use-package typescript-mode
  :after tree-sitter
  :ensure t
  :hook
  (typescript-mode . eg/typescript-mode-hook))
(define-derived-mode typescriptreact-mode typescript-mode "TSX")
(add-to-list 'auto-mode-alist '("\\.tsx?\\'"  . typescriptreact-mode))
(add-to-list 'auto-mode-alist '("\\.ts?\\'"  . typescript-mode))
#+end_src

Install rjsx mode for dealing with JSX specifically. Note that in the custom hook we've written for this package, js2 becomes a minor mode.
#+begin_src emacs-lisp
(defun eg/rjsx-mode-hook ()
        ;;(js2-minor-mode)
        (add-node-modules-path)
        (company-mode)
        (eglot-ensure)
        )
(use-package rjsx-mode
  :hook (rjsx-mode . eg/rjsx-mode-hook))

(add-to-list 'auto-mode-alist '("\\.jsx?$" . rjsx-mode))
#+end_src

Use Prettier for better JS formatting
#+begin_src emacs-lisp
(use-package prettier-js
  :hook ((js2-mode . prettier-js-mode)
         (web-mode . prettier-js-mode)
         (typescript-mode . prettier-js-mode)
         (prettier-js-mode . add-node-modules-path)))
#+end_src

Try to use local eslint config files, if found
#+begin_src emacs-lisp
(use-package eslint-rc
  :hook ((js2-mode . eslint-rc-mode)
         (typescript-mode . eslint-rc-mode)
         (rjsx-mode . eslint-rc-mode)))
#+end_src

We need popwin to popup special Eglot modes
#+begin_src emacs-lisp
(use-package popwin
  :config (lambda ()
            (push "*xref*" popwin:special-display-config)))
#+end_src
*** JSON Settings
#+begin_src emacs-lisp
(use-package json-mode)
#+end_src

*** HTML/Web Settings
We use web-mode for editing HTML
#+begin_src emacs-lisp
(use-package web-mode)
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb?\\'" . web-mode))
#+end_src

*** CSS and SASS
#+begin_src emacs-lisp
(use-package sass-mode)
(add-to-list 'auto-mode-alist '("\\.scss?\\'" . sass-mode))
#+end_src

*** Markdown
#+begin_src emacs-lisp
(use-package markdown-mode)
#+end_src
Use grip mode for instant previews of markdown
#+begin_src emacs-lisp
(use-package grip-mode
  :ensure t
  :bind (:map markdown-mode-command-map
         ("g" . grip-mode)))
#+end_src
*** YAML
#+begin_src emacs-lisp
(use-package yaml-mode)
(add-to-list 'auto-mode-alist '("\\.\\(yml\\|yaml\\)?\\'" . yaml-mode))
#+end_src
*** Lisp Settings (including Elisp)
Highlight parentheses when we are editing lisp files.
#+begin_src emacs-lisp
(add-hook 'lisp-mode-hook 'show-paren-mode)
#+end_src

Use Geiser for non-Elisp lisp modes. Here we only provide for Guile Scheme.
#+begin_src emacs-lisp
(use-package geiser)
(use-package geiser-guile)
#+end_src

*** LSP Settings
The following are the old settings for `lsp-mode`, which are currently _INACTIVE_. We have opted for `eglot-mode` instead, but preserve the old settings here for posterity in case we need to switch back.
#+begin_src emacs-lisp
  ;; (defun eg/lsp-mode-setup ()
  ;;   (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  ;;   (lsp-headerline-breadcrumb-mode)
  ;;   (lsp-deferred))
  ;; (use-package lsp-mode
  ;;   :commands (lsp lsp-deferred)
  ;;   :hook ((js2-mode . eg/lsp-mode-setup))
  ;;   :init
  ;;   (setq lsp-keymap-prefix "C-c l")
  ;;   :config
  ;;   (lsp-enable-which-key-integration t))
;; LSP ivy integration allows things like jumping
;; to definitions in a file from a list
;;(use-package lsp-ivy)
#+end_src

`eglot-mode` is the new preferred LSP interaction mode.
#+begin_src emacs-lisp
(use-package eglot
  :config
  ;; We define a custom eglot hover function to deal with
  ;; Solargraph's returning of null when hovering over an
  ;; empty area. See (https://github.com/joaotavora/eglot/issues/1019#issuecomment-1230546329)
  (defun eglot--format-markup (markup)
  "Format MARKUP according to LSP's spec."
  (if (plist-get markup :value)
      (pcase-let ((`(,string ,mode)
               (if (stringp markup) (list markup 'gfm-view-mode)
                 (list (plist-get markup :value)
                       (pcase (plist-get markup :kind)
                         ("markdown" 'gfm-view-mode)
                         ("plaintext" 'text-mode)
                         (_ major-mode))))))
    (with-temp-buffer
      (setq-local markdown-fontify-code-blocks-natively t)
      (insert string)
      (let ((inhibit-message t)
	    (message-log-max nil))
        (ignore-errors (delay-mode-hooks (funcall mode))))
      (font-lock-ensure)
      (string-trim (filter-buffer-substring (point-min) (point-max)))))
      "\n"))
  (add-to-list 'eglot-server-programs
   '((typescript-mode) "typescript-language-server" "--stdio"))
  (add-to-list 'eglot-server-programs
  '(enh-ruby-mode "solargraph" "socket" "--port" :autoport))
  )
#+end_src

Tell LSP mode where to find your tsconfig file(s), when used. Taken from (https://notes.alexkehayias.com/setting-up-typescript-and-eslint-with-eglot/)
#+begin_src emacs-lisp
;; (defun eg/project-try-ts-config-json (dir)
;;   (when-let* ((found (locate-dominating-file-dir "tsconfig.json")))
;;     (cons 'eglot-project found)))
;; (add-hook 'project-find-functions 'eg/project-try-ts-config-json nil nil)
;; (add-to-list 'eglot-server-programs
;;              '((typescript-mode) "typescript-language-server" "--stdio"))
#+end_src


*** ELisp Mode
#+begin_src emacs-lisp
(set-face-attribute 'show-paren-match nil :weight 'extra-bold :underline t)
#+end_src

** DAP Settings
Debug Adapter Protocol Settings
#+begin_src emacs-lisp
(use-package dap-mode
  :config
  (require 'dap-node)
  (dap-node-setup))
#+end_src
** General Formatting Settings
*** Olivetti
#+begin_src emacs-lisp
(use-package olivetti)
#+end_src
** Company and Completions Settings
We use `company-mode` for inline completions
#+begin_src emacs-lisp
(use-package company
  :bind (:map company-active-map
              ("<tab>" . company-complete-selection))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))
#+end_src

Company Box provides the completions in an overlay/modal box
#+begin_src emacs-lisp
(use-package company-box
  :hook (company-mode . company-box-mode))
#+end_src

** Elpher Settings
Elpher is a mode for dealing with Gemini and Gopher browsing
#+begin_src emacs-lisp
(use-package elpher
  :custom-face
  (fixed-width ((t :family "Fira Sans"))))
#+end_src

** Org Settings
*** Old Settings (_INACTIVE_) :INACTIVE:
The following are the `org-mode` settings I was previously using in my main config. It is currently _INACTIVE_, as I'm experimenting with more of a NANO based theme.

#+begin_src emacs-lisp
;; (defun eg/org-mode-setup ()
;;   ;;(org-indent-mode)
;;   (variable-pitch-mode 1)
;;   (visual-line-mode 1)
;;   (setq org-hide-emphasis-markers t))

;; (defvar eg/org-mode-font-family "LibreBaskerville" "Font family to use in org mode. Depends on system-name (see init.el). defaults to Libre Baskerville, but will be EtBembo on Pop_OS based systems, which have a hard time rendering Libre Baskerville for some reason")
;; (defvar eg/org-mode-font-height-factor 1.0 "Factor by which to display variable pitch fonts in Org Mode")
;; ;; Pop_OS has some weird character issue when
;; ;; rendering Libre Baskerville.
;; ;; If we are using Pop_OS, use EtBembo instead
;; ;; and increase the height factor
;; (if (string-equal (system-name) "pop-os")
;;     (progn
;;       (setq eg/org-mode-font-family "EtBembo")
;;       (setq eg/org-mode-font-height-factor 1.8)))

;; (use-package org
;;   :custom
;;   (org-pretty-entities t)
;;   (org-hide-emphasis-markers t)
;;   (org-fontify-whole-heading-line t)
;;   (org-fontify-done-headline t)
;;   (org-fontify-quote-and-verse-blocks t)
;;   :custom-face
;;   (org-document-title ((t (:weight bold :height 1.5))))
;;   (org-done ((t (:strike-through t :weight bold))))
;;   (org-headline-done ((t (:strike-through t))))
;;   (org-level-1 ((t (:height 1.3 :weight bold))))
;;   (org-level-2 ((t (:height 1.2 :weight bold))))
;;   (org-level-3 ((t (:height 1.1 :weight bold))))
;;   (org-image-actual-width (/ (display-pixel-width) 2)))

;; (add-hook
;;  'org-mode-hook
;;  '(lambda ()
;;     (setq line-spacing 0.2) ;; Add more line padding for readability
;;     ;; We set the variable pitch here because we are using semi-quoted
;;     ;; for variables, which apparently does not work with use-package's
;;     ;; basic :custom-face capability
;;     (custom-set-faces `(variable-pitch ((t (:family ,eg/org-mode-font-family)))))
;;     (variable-pitch-mode 1) ;; All fonts with variable pitch.
;;     (text-scale-adjust 3) ;; Adjust text scale
;;     (mapc
;;      (lambda (face) ;; Other fonts with fixed-pitch.
;;        (set-face-attribute face nil :inherit 'fixed-pitch))
;;      (list 'org-code
;;            'org-link
;;            'org-block
;;            'org-table
;;            'org-verbatim
;;            'org-block-begin-line
;;            'org-block-end-line
;;            'org-meta-line
;;            'org-document-info-keyword))))

;; (setq org-agenda-restore-windows-after-quit t)
;; (setq org-agenda-skip-unavailable-files t)
;; (setq org-agenda-files '("~/Sync/primary-agenda.org"))
#+end_src

*** Interim Config (_INACTIVE_) :INACTIVE:
This area is for the new org-mode config
#+begin_src emacs-lisp
  (use-package org
    :custom
    (org-pretty-entities t)
    (org-return-follows-link t)
    (org-hide-emphasis-markers t)
    (org-fontify-whole-heading-line t)
    (org-fontify-done-headline t)
    (org-fontify-quote-and-verse-blocks t)
    :custom-face
    (org-document-title ((t (:weight bold :height 1.5))))
    (org-done ((t (:strike-through t :weight bold))))
    (org-headline-done ((t (:strike-through t))))
    (org-level-1 ((t (:height 1.3 :weight bold))))
    (org-level-2 ((t (:height 1.2 :weight bold))))
    (org-level-3 ((t (:height 1.1 :weight bold))))
    (org-image-actual-width (/ (display-pixel-width) 2)))
(setq org-agenda-restore-windows-after-quit t)
(setq org-agenda-skip-unavailable-files t)
(setq org-agenda-files '("~/Sync/primary-agenda.org"))
#+end_src

Use `org-roam` for linked notes. We provide specific settings for the location of these notes, based on Syncthing paths
#+begin_src emacs-lisp
(use-package org-roam
  :config
  (make-directory "~/Documents/org-roam" t)
  :custom
  (org-roam-directory "~/Documents/org-roam")
  )
#+end_src

*** New Test Settings
Modified from [[https://github.com/rougier/dotemacs/blob/master/dotemacs.org][https://github.com/rougier/dotemacs/blob/master/dotemacs.org]]
**** General Settings
#+begin_src emacs-lisp
(use-package org)
;; Basic Defaults
(setq-default org-ellipsis " …"              ; Nicer ellipsis
            org-tags-column 1              ; Tags next to header title
            org-hide-emphasis-markers t    ; Hide markers
            org-cycle-separator-lines 2    ; Number of empty lines between sections
            org-use-tag-inheritance nil    ; Tags ARE NOT inherited 
            org-use-property-inheritance t ; Properties ARE inherited
            org-indent-indentation-per-level 2 ; Indentation per level
            org-link-use-indirect-buffer-for-internals t ; Indirect buffer for internal links
            org-fontify-quote-and-verse-blocks t ; Specific face for quote and verse blocks
            org-return-follows-link nil    ; Follow links when hitting return
            org-image-actual-width nil     ; Resize image to window width
            org-indirect-buffer-display 'other-window ; Tab on a task expand it in a new window
            org-outline-path-complete-in-steps nil ; No steps in path display
            org-return-follows-link t) ;Self explanatory
#+end_src

Use ~org-modern~ to make org mode start to look nice
#+begin_src emacs-lisp
(use-package org-modern
:hook (org-mode . org-modern-mode))
#+end_src

Use some custom capture templates
#+begin_src emacs-lisp
(defun eg/get-project-org-capture-file ()
  (concat (projectile-project-root) "todo.org"))
(defun eg/org-capture-get-line-number-string ()
  "Get the line number as a string from an org-capture session"
  )
(setq org-capture-templates
      '(("t" "Basic TODO" entry (file+headline "todo.org" "Basic Tasks")
         "* TODO %?\n %i\n %a")
        ("p" "Project TODO" entry (file+headline (lambda () (eg/get-project-org-capture-file)) "Project Tasks")
         "* TODO %?\n %t\n In file: [[file:%F::%(with-current-buffer (org-capture-get :original-file-nondirectory) (number-to-string (line-number-at-pos)))][%f]]\n\n")))
#+end_src

#+RESULTS:
| t | Basic TODO | entry | (file+headline todo.org Basic Tasks) | * TODO %? |

**** Babel Settings
We provide some nice initial Babel settings, such as appropriate fonts for code blocks etc.
#+begin_src emacs-lisp
  (setq-default org-src-fontify-natively t         ; Fontify code in code blocks.
              org-adapt-indentation nil          ; Adaptive indentation
              org-src-tab-acts-natively t        ; Tab acts as in source editing
              org-confirm-babel-evaluate nil     ; No confirmation before executing code
              org-edit-src-content-indentation 0 ; No relative indentation for code blocks
              org-fontify-whole-block-delimiter-line t) ; Fontify whole block
#+end_src
**** Font Settings
#+begin_src emacs-lisp

;; (setq eg/org-mode-font-family "Baskerville")
;; (add-hook
;;  'org-mode-hook
;;  (lambda ()
;;     (setq line-spacing 0.2) ;; Add more line padding for readability
;;     ;; We set the variable pitch here because we are using semi-quoted
;;     ;; for variables, which apparently does not work with use-package's
;;     ;; basic :custom-face capability
;;     (custom-set-faces `(variable-pitch ((t (:family ,eg/org-mode-font-family)))))
;;     (variable-pitch-mode 1) ;; All fonts with variable pitch.
;;     (text-scale-adjust 3) ;; Adjust text scale
;;     (mapc
;;      (lambda (face) ;; Other fonts with fixed-pitch.
;;        (set-face-attribute face nil :inherit 'fixed-pitch))
;;      (list 'org-code
;;            'org-link
;;            'org-block
;;            'org-table
;;            'org-verbatim
;;            'org-block-begin-line
;;            'org-block-end-line
;;            'org-meta-line
;;            'org-document-info-keyword))))
;; (message "Using macbook-m1.lan org font settings")
#+end_src
** Eshell Settings
*** Themes
#+begin_src emacs-lisp
    (use-package eshell-git-prompt
      :ensure t)
    (defun eg/eshell-mode-hook ()
          (use-theme 'powerline))
        (add-hook 'eshell-mode-hook 'eg/eshell-mode-hook)
#+end_src
** Dired and Dirvish
*** Dirvish :INACTIVE:
We are using Dirvish as a substitute for Dired mode (_INACTIVE_) 
#+begin_src emacs-lisp
(use-package dirvish
  :ensure t
  :init
  ;; Let Dirvish take over Dired globally
  (dirvish-override-dired-mode))
#+end_src
*** Dired
We want to open directories in the same window when clicking them
#+begin_src emacs-lisp
(define-key dired-mode-map [mouse-2] 'dired-mouse-find-file)
#+end_src
** Projectile Settings
Projectile is a package used for project management. It has many useful features, not least among them a project-wide grep within files.
#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~/projects")
    (setq projectile-project-search-path '("~/projects")))
  (setq projectile-switch-project-action #'projectile-dired))
#+end_src

Add some custom functions that will help when in Projectile projects
#+begin_src emacs-lisp
;; Retrieves the current file path without
;; the Projectile project's root at the beginning
;; (ie, a "project-relative" path of the current file)
(defun eg/project-filename ()
  (if buffer-file-name
      (substring
       buffer-file-name
       (length (projectile-project-root))
       nil)
    ""))

(defun eg/project-filename-to-clipboard ()
  "Place the project root relative path of
  the file of the current buffer into the clipboard"
  (interactive)
  (let ((path (eg/project-filename)))
    (with-temp-buffer
      (insert path)
      (clipboard-kill-region (point-min) (point-max)))))
#+end_src
*** Custom Projectile Project Types
**** Deno
#+begin_src emacs-lisp
(projectile-register-project-type 'deno '("deno.json")
  :project-file "deno.json"
  :run "deno task start")
#+end_src
** Compilation Mode Settings
I want to have compilation buffers to have "special-mode"-like ability to quit on q
#+begin_src emacs-lisp
(defun eg/compilation-mode-q ()
(local-set-key (kbd "q") 'kill-buffer-and-window))

(add-hook 'compilation-mode-hook #'eg/compilation-mode-q)
#+end_src
** Linting and Highlighting
*** Flymake
#+begin_src emacs-lisp
      (use-package flymake
      :straight nil
      :custom
      (flymake-fringe-indicator-position nil)
      :hook
      (prog-mode . flymake-mode))
#+end_src
*** Flycheck :INACTIVE:
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :hook (flycheck-mode . add-node-modules-path)
  :init (global-flycheck-mode))

(use-package flycheck-pos-tip
  :after flycheck)
#+end_src
*** Flymake Settings
Here we use the new-and-improved built in Flymake rather than Flycheck

Use the eslint backend for Flymake
#+begin_src emacs-lisp
(use-package flymake-eslint)
(use-package flymake-ruby
  :hook (enh-ruby-mode . flymake-ruby-load))
(add-hook 'js2-mode (lambda () (flymake-eslint-enable)))
(add-hook 'typescript-mode (lambda () (flymake-eslint-enable)))
(add-hook 'rjsx-mode (lambda () (flymake-eslint-enable)))
#+end_src
*** Tree-Sitter
#+begin_src emacs-lisp
(use-package tree-sitter
  :hook
  (js2-mode . tree-sitter-hl-mode)
  (typescript-mode . tree-sitter-hl-mode)
  (typescriptreact-mode . tree-sitter-hl-mode)
  (enh-ruby-mode . tree-sitter-hl-mode))

(use-package tree-sitter-langs
  :after tree-sitter
  :config
  (add-to-list
    'tree-sitter-major-mode-language-alist
    '(typescriptreact-mode . tsx))
  (add-to-list
    'tree-sitter-major-mode-language-alist
    '(enh-ruby-mode . ruby)))
#+end_src
** Snippets
We use yasnippet for enabling snippets
#+begin_src emacs-lisp
(use-package yasnippet)
(yas-global-mode 1)
(setq org-src-tab-acts-natively nil)
#+end_src

Use a repository of preconfigured snippets
#+begin_src emacs-lisp
(use-package yasnippet-snippets)
#+end_src





** Dir Local Setup
We need to whitelist certain unsafe variables as safe, when setting using a dir-locals file:
#+begin_src emacs-lisp
()
#+end_src
** Load Further Custom Functions
We provide a host of over custom functions in a separate file
#+begin_src emacs-lisp
(load "~/.emacs.d/eric-functions.el")
#+end_src

** Finally
Enable `nano-mode`, if it's available
#+begin_src emacs-lisp
;;(nano-mode)
#+end_src

Set the default cursor for all buffers and frames to be a box
*** Custom Variables
#+begin_src emacs-lisp
(defcustom eg/irc-password nil "Default password to use for irc" :group 'eg)
;; More custom vars here
(load custom-file)
#+end_src
*** IRC Settings
I use a custom interactive function to get my IRC password at startup. It is then saved in a custom variable for future sessions. Or at least, that was the idea. For some reason it asks every time I start Emacs...
#+begin_src emacs-lisp
(defun eg/get-irc-password ()
  "Set the custom irc pass variable and add it to the
rcirc authinfo list for Freenode"
  (interactive)
  (customize-save-variable 'eg/irc-password (read-passwd "Enter Libera pass: "))
  (customize-save-variable 'rcirc-authinfo `(("libera" nickserv "darth-cheney" ,eg/irc-password)))
  (customize-save-variable 'rcirc-default-nick "darth-cheney"))

(if (or (not (boundp 'eg/irc-password)) (equal eg/irc-password nil))
    (progn
      (call-interactively 'eg/get-irc-password)))
#+end_src
